// Notification Service cho Telegram Bot
const TelegramBot = require('node-telegram-bot-api');
const db = require('../config/database');

class NotificationService {
  constructor() {
    this.bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false });
  }

  /**
   * G·ª≠i th√¥ng b√°o harvest cho user
   */
  async sendHarvestNotification(userId, cropData) {
    try {
      // L·∫•y th√¥ng tin user
      const user = await db('users').where({ id: userId }).first();
      
      if (!user || !user.telegram_chat_id) {
        console.log(`User ${userId} kh√¥ng c√≥ Telegram chat ID`);
        return { success: false, error: 'No Telegram chat ID' };
      }

      // T·∫°o message
      const message = this.createHarvestMessage(cropData);
      
      // G·ª≠i th√¥ng b√°o
      await this.bot.sendMessage(user.telegram_chat_id, message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üåª Xem Dashboard',
                url: 'https://sunflowerland-telegram-notifications-production.up.railway.app'
              }
            ],
            [
              {
                text: '‚úÖ ƒê√£ thu ho·∫°ch',
                callback_data: `harvest_${cropData.id}`
              }
            ]
          ]
        }
      });

      // L∆∞u th√¥ng b√°o v√†o database
      await this.saveNotification(userId, 'Harvest Ready', message, true);

      return { success: true, message: 'Notification sent successfully' };
    } catch (error) {
      console.error('Error sending harvest notification:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * G·ª≠i th√¥ng b√°o daily summary
   */
  async sendDailySummary(userId) {
    try {
      const user = await db('users').where({ id: userId }).first();
      
      if (!user || !user.telegram_chat_id) {
        return { success: false, error: 'No Telegram chat ID' };
      }

      // L·∫•y th√¥ng tin crops
      const crops = await db('user_crops')
        .where({ user_id: userId })
        .orderBy('harvest_time', 'asc');

      const message = this.createDailySummaryMessage(crops);
      
      await this.bot.sendMessage(user.telegram_chat_id, message, {
        parse_mode: 'HTML'
      });

      await this.saveNotification(userId, 'Daily Summary', message, true);

      return { success: true, message: 'Daily summary sent' };
    } catch (error) {
      console.error('Error sending daily summary:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * G·ª≠i th√¥ng b√°o cho t·∫•t c·∫£ users
   */
  async sendBroadcastNotification(message, title = 'System Notification') {
    try {
      const users = await db('users')
        .where({ telegram_linked: true })
        .whereNotNull('telegram_chat_id');

      let successCount = 0;
      let errorCount = 0;

      for (const user of users) {
        try {
          await this.bot.sendMessage(user.telegram_chat_id, message, {
            parse_mode: 'HTML'
          });
          await this.saveNotification(user.id, title, message, true);
          successCount++;
        } catch (error) {
          console.error(`Error sending to user ${user.id}:`, error.message);
          errorCount++;
        }
      }

      return {
        success: true,
        message: `Sent to ${successCount} users, ${errorCount} errors`
      };
    } catch (error) {
      console.error('Error sending broadcast:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * Ki·ªÉm tra v√† g·ª≠i th√¥ng b√°o harvest
   */
  async checkAndSendHarvestNotifications() {
    try {
      console.log('üîç Checking for harvest notifications...');
      
      // L·∫•y crops s·∫µn s√†ng thu ho·∫°ch
      const readyCrops = await db('user_crops')
        .where('harvest_time', '<=', new Date())
        .where('status', '!=', 'harvested')
        .where('notification_sent', false);

      console.log(`Found ${readyCrops.length} crops ready for harvest`);

      for (const crop of readyCrops) {
        // G·ª≠i th√¥ng b√°o
        const result = await this.sendHarvestNotification(crop.user_id, crop);
        
        if (result.success) {
          // ƒê√°nh d·∫•u ƒë√£ g·ª≠i th√¥ng b√°o
          await db('user_crops')
            .where({ id: crop.id })
            .update({ notification_sent: true });
          
          console.log(`‚úÖ Sent harvest notification for crop ${crop.id}`);
        } else {
          console.error(`‚ùå Failed to send notification for crop ${crop.id}:`, result.error);
        }
      }

      return {
        success: true,
        message: `Processed ${readyCrops.length} harvest notifications`
      };
    } catch (error) {
      console.error('Error checking harvest notifications:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * T·∫°o message th√¥ng b√°o harvest
   */
  createHarvestMessage(crop) {
    const harvestTime = new Date(crop.harvest_time).toLocaleString('vi-VN');
    
    return `üåª <b>Th√¥ng b√°o thu ho·∫°ch!</b>\n\n` +
           `üå± <b>C√¢y tr·ªìng:</b> ${crop.crop_name || 'Unknown'}\n` +
           `‚è∞ <b>Th·ªùi gian:</b> ${harvestTime}\n` +
           `üìä <b>Ti·∫øn ƒë·ªô:</b> ${crop.progress || 0}%\n\n` +
           `üéâ C√¢y tr·ªìng c·ªßa b·∫°n ƒë√£ s·∫µn s√†ng ƒë·ªÉ thu ho·∫°ch!\n` +
           `H√£y v√†o game ƒë·ªÉ thu ho·∫°ch v√† tr·ªìng c√¢y m·ªõi.`;
  }

  /**
   * T·∫°o message daily summary
   */
  createDailySummaryMessage(crops) {
    const now = new Date();
    const today = now.toLocaleDateString('vi-VN');
    
    let message = `üìä <b>B√°o c√°o h√†ng ng√†y - ${today}</b>\n\n`;
    
    if (crops.length === 0) {
      message += `üå± B·∫°n ch∆∞a c√≥ c√¢y tr·ªìng n√†o.\nH√£y v√†o game ƒë·ªÉ b·∫Øt ƒë·∫ßu tr·ªìng c√¢y!`;
    } else {
      const readyCrops = crops.filter(crop => 
        new Date(crop.harvest_time) <= now && crop.status !== 'harvested'
      );
      const growingCrops = crops.filter(crop => 
        new Date(crop.harvest_time) > now && crop.status !== 'harvested'
      );
      const harvestedCrops = crops.filter(crop => crop.status === 'harvested');

      message += `üìà <b>Th·ªëng k√™:</b>\n`;
      message += `üå± T·ªïng c√¢y tr·ªìng: ${crops.length}\n`;
      message += `üéâ S·∫µn s√†ng thu ho·∫°ch: ${readyCrops.length}\n`;
      message += `üåø ƒêang ph√°t tri·ªÉn: ${growingCrops.length}\n`;
      message += `‚úÖ ƒê√£ thu ho·∫°ch: ${harvestedCrops.length}\n\n`;

      if (readyCrops.length > 0) {
        message += `üö® <b>C√¢y s·∫µn s√†ng thu ho·∫°ch:</b>\n`;
        readyCrops.forEach(crop => {
          message += `‚Ä¢ ${crop.crop_name || 'Unknown'}\n`;
        });
        message += `\n`;
      }

      if (growingCrops.length > 0) {
        message += `‚è∞ <b>C√¢y ƒëang ph√°t tri·ªÉn:</b>\n`;
        growingCrops.slice(0, 3).forEach(crop => {
          const timeLeft = this.getTimeLeft(crop.harvest_time);
          message += `‚Ä¢ ${crop.crop_name || 'Unknown'} (${timeLeft})\n`;
        });
        if (growingCrops.length > 3) {
          message += `‚Ä¢ ... v√† ${growingCrops.length - 3} c√¢y kh√°c\n`;
        }
      }
    }

    message += `\nüåª <b>Ch√∫c b·∫°n c√≥ m·ªôt ng√†y vui v·∫ª!</b>`;
    
    return message;
  }

  /**
   * T√≠nh th·ªùi gian c√≤n l·∫°i
   */
  getTimeLeft(harvestTime) {
    const now = new Date();
    const harvest = new Date(harvestTime);
    const diff = harvest - now;
    
    if (diff <= 0) return 'S·∫µn s√†ng';
    
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    
    if (hours > 0) {
      return `${hours}h ${minutes}m`;
    } else {
      return `${minutes}m`;
    }
  }

  /**
   * L∆∞u th√¥ng b√°o v√†o database
   */
  async saveNotification(userId, title, message, sent = false) {
    try {
      await db('notifications').insert({
        user_id: userId,
        title: title,
        message: message,
        sent: sent,
        created_at: new Date()
      });
    } catch (error) {
      console.error('Error saving notification:', error);
    }
  }

  /**
   * X·ª≠ l√Ω callback query t·ª´ Telegram
   */
  async handleCallbackQuery(callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    const messageId = callbackQuery.message.message_id;

    try {
      if (data.startsWith('harvest_')) {
        const cropId = data.replace('harvest_', '');
        
        // ƒê√°nh d·∫•u crop ƒë√£ thu ho·∫°ch
        await db('user_crops')
          .where({ id: cropId })
          .update({ 
            status: 'harvested',
            updated_at: new Date()
          });

        // C·∫≠p nh·∫≠t message
        await this.bot.editMessageText(
          '‚úÖ ƒê√£ ƒë√°nh d·∫•u c√¢y tr·ªìng ƒë√£ thu ho·∫°ch!\nC·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng h·ªá th·ªëng th√¥ng b√°o.',
          {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üåª Xem Dashboard',
                    url: 'https://sunflowerland-telegram-notifications-production.up.railway.app'
                  }
                ]
              ]
            }
          }
        );

        await this.bot.answerCallbackQuery(callbackQuery.id, {
          text: 'ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i thu ho·∫°ch!'
        });
      }
    } catch (error) {
      console.error('Error handling callback query:', error);
      await this.bot.answerCallbackQuery(callbackQuery.id, {
        text: 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!'
      });
    }
  }
}

module.exports = new NotificationService();
