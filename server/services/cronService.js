const cron = require('node-cron');
const db = require('../config/database');
const { sendHarvestNotification } = require('../routes/telegram');

class CronService {
  constructor() {
    this.jobs = new Map();
    this.startJobs();
  }

  startJobs() {
    // Ki·ªÉm tra c√¢y s·∫µn s√†ng thu ho·∫°ch m·ªói ph√∫t
    this.jobs.set('harvest-check', cron.schedule('* * * * *', async () => {
      await this.checkHarvestReady();
    }));

    // G·ª≠i th√¥ng b√°o h√†ng ng√†y l√∫c 8:00
    this.jobs.set('daily-summary', cron.schedule('0 8 * * *', async () => {
      await this.sendDailySummary();
    }));

    // D·ªçn d·∫πp th√¥ng b√°o c≈© m·ªói ng√†y l√∫c 2:00
    this.jobs.set('cleanup', cron.schedule('0 2 * * *', async () => {
      await this.cleanupOldNotifications();
    }));

    console.log('üïê Cron jobs started successfully');
  }

  async checkHarvestReady() {
    try {
      // T√¨m c√¢y s·∫µn s√†ng thu ho·∫°ch ch∆∞a g·ª≠i th√¥ng b√°o
      const readyCrops = await db('user_crops')
        .join('crops', 'user_crops.crop_id', 'crops.id')
        .join('users', 'user_crops.user_id', 'users.id')
        .where('user_crops.is_harvested', false)
        .where('user_crops.notification_sent', false)
        .where('user_crops.harvest_ready_at', '<=', db.fn.now())
        .where('users.telegram_linked', true)
        .where('users.notifications_enabled', true)
        .select(
          'user_crops.id',
          'user_crops.user_id',
          'user_crops.quantity',
          'crops.name as crop_name',
          'users.telegram_chat_id'
        );

      for (const crop of readyCrops) {
        try {
          // G·ª≠i th√¥ng b√°o qua Telegram
          const sent = await sendHarvestNotification(
            crop.user_id,
            crop.crop_name,
            crop.quantity
          );

          if (sent) {
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√£ g·ª≠i th√¥ng b√°o
            await db('user_crops')
              .where('id', crop.id)
              .update({ notification_sent: true });

            // T·∫°o record th√¥ng b√°o
            await db('notifications').insert({
              user_id: crop.user_id,
              type: 'harvest_ready',
              title: 'C√¢y s·∫µn s√†ng thu ho·∫°ch!',
              message: `${crop.crop_name} ƒë√£ s·∫µn s√†ng thu ho·∫°ch!`,
              data: {
                crop_id: crop.id,
                crop_name: crop.crop_name,
                quantity: crop.quantity
              },
              sent: true,
              sent_at: new Date()
            });

            console.log(`‚úÖ Sent harvest notification for ${crop.crop_name} to user ${crop.user_id}`);
          }
        } catch (error) {
          console.error(`‚ùå Error sending notification for crop ${crop.id}:`, error);
        }
      }

      if (readyCrops.length > 0) {
        console.log(`üåª Checked ${readyCrops.length} crops ready for harvest`);
      }
    } catch (error) {
      console.error('‚ùå Error in harvest check cron job:', error);
    }
  }

  async sendDailySummary() {
    try {
      // L·∫•y t·∫•t c·∫£ user c√≥ li√™n k·∫øt Telegram
      const users = await db('users')
        .where('telegram_linked', true)
        .where('notifications_enabled', true)
        .select('id', 'telegram_chat_id', 'username');

      for (const user of users) {
        try {
          // L·∫•y th·ªëng k√™ c√¢y tr·ªìng c·ªßa user
          const stats = await db('user_crops')
            .where('user_id', user.id)
            .select(
              db.raw('COUNT(*) as total_crops'),
              db.raw('COUNT(CASE WHEN is_harvested = false AND harvest_ready_at <= NOW() THEN 1 END) as ready_to_harvest'),
              db.raw('COUNT(CASE WHEN is_harvested = false AND harvest_ready_at > NOW() THEN 1 END) as growing_crops')
            )
            .first();

          // L·∫•y c√¢y s·∫µn s√†ng thu ho·∫°ch
          const readyCrops = await db('user_crops')
            .join('crops', 'user_crops.crop_id', 'crops.id')
            .where('user_crops.user_id', user.id)
            .where('user_crops.is_harvested', false)
            .where('user_crops.harvest_ready_at', '<=', db.fn.now())
            .select('crops.name', 'user_crops.quantity');

          if (stats.total_crops > 0) {
            let message = `üìä B√°o c√°o h√†ng ng√†y - ${new Date().toLocaleDateString('vi-VN')}\n\n`;
            message += `üå± T·ªïng c√¢y tr·ªìng: ${stats.total_crops}\n`;
            message += `‚è∞ S·∫µn s√†ng thu ho·∫°ch: ${stats.ready_to_harvest}\n`;
            message += `üåø ƒêang ph√°t tri·ªÉn: ${stats.growing_crops}\n\n`;

            if (readyCrops.length > 0) {
              message += `üéØ C√¢y s·∫µn s√†ng thu ho·∫°ch:\n`;
              readyCrops.forEach(crop => {
                message += `‚Ä¢ ${crop.name} (${crop.quantity})\n`;
              });
            } else {
              message += `üò¥ Ch∆∞a c√≥ c√¢y n√†o s·∫µn s√†ng thu ho·∫°ch.`;
            }

            // G·ª≠i th√¥ng b√°o qua Telegram
            const { bot } = require('../routes/telegram');
            await bot.sendMessage(user.telegram_chat_id, message);

            // T·∫°o record th√¥ng b√°o
            await db('notifications').insert({
              user_id: user.id,
              type: 'daily_summary',
              title: 'B√°o c√°o h√†ng ng√†y',
              message: message,
              data: {
                total_crops: stats.total_crops,
                ready_to_harvest: stats.ready_to_harvest,
                growing_crops: stats.growing_crops
              },
              sent: true,
              sent_at: new Date()
            });

            console.log(`üìä Sent daily summary to user ${user.username}`);
          }
        } catch (error) {
          console.error(`‚ùå Error sending daily summary to user ${user.id}:`, error);
        }
      }
    } catch (error) {
      console.error('‚ùå Error in daily summary cron job:', error);
    }
  }

  async cleanupOldNotifications() {
    try {
      // X√≥a th√¥ng b√°o c≈© h∆°n 30 ng√†y
      const deleted = await db('notifications')
        .where('created_at', '<', db.raw("NOW() - INTERVAL '30 days'"))
        .del();

      console.log(`üßπ Cleaned up ${deleted} old notifications`);
    } catch (error) {
      console.error('‚ùå Error in cleanup cron job:', error);
    }
  }

  stopJobs() {
    this.jobs.forEach((job, name) => {
      job.stop();
      console.log(`‚èπÔ∏è Stopped cron job: ${name}`);
    });
    this.jobs.clear();
  }

  getJobStatus() {
    const status = {};
    this.jobs.forEach((job, name) => {
      status[name] = {
        running: job.running,
        scheduled: job.scheduled
      };
    });
    return status;
  }
}

module.exports = new CronService();
